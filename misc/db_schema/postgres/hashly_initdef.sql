
/*Project: 			hashly*/
/*File description: DDL & DML statements for constructing the application's initial database structure (optimized for PostgreSQL 9.2.3).*/
/*Author:			Priidu Neemre (priidu@neemre.com)*/
/*Last modified: 	2014-09-29 16:51:29*/


/*1. DDL - Root-level database objects*/
/*1.1 Creation statements*/
/*(For Windows environments)*/
CREATE DATABASE HASHLY
WITH
OWNER PRIIDU_DBA
TEMPLATE TEMPLATE0
ENCODING 'UTF8'
LC_COLLATE 'English_United states.1252'
LC_CTYPE 'English_United states.1252'
CONNECTION LIMIT 100;

/*(For Linux environments)*/
CREATE DATABASE HASHLY
WITH
OWNER PRIIDU_DBA
TEMPLATE TEMPLATE0
ENCODING 'UTF8'
LC_COLLATE 'en_US.UTF-8'
LC_CTYPE 'en_US.UTF-8'
CONNECTION LIMIT 100;

/*1.2 Removal statements*/
DROP DATABASE IF EXISTS HASHLY;


/*2. DDL - Tables*/
/*2.1 Creation statements*/
CREATE TABLE ALGORITHM (
	ALGORITHM_ID			SERIAL,
	NAME					VARCHAR(10)		NOT NULL,
	DIGEST_LENGTH_BITS		INTEGER			NOT NULL,
	DESCRIPTION				TEXT			NOT NULL,
	
	CONSTRAINT PK_ALGORITHM PRIMARY KEY (ALGORITHM_ID),
	CONSTRAINT AK_ALGORITHM_NAME UNIQUE (NAME),
	
	CONSTRAINT CHK_ALGORITHM_DIGEST_LENGTH_BITS_IN_RANGE CHECK (DIGEST_LENGTH_BITS BETWEEN 1 AND 4096)
);

CREATE TABLE GUEST (
	GUEST_ID				SERIAL,
	IP_ADDRESS				VARCHAR(255)	NOT NULL,
	VISIT_COUNT				INTEGER			NOT	NULL	DEFAULT 1,
	
	CONSTRAINT PK_GUEST PRIMARY KEY (GUEST_ID),
	CONSTRAINT AK_GUEST_IP_ADDRESS UNIQUE (IP_ADDRESS),
	
	CONSTRAINT CHK_GUEST_VISIT_COUNT_IN_RANGE CHECK (VISIT_COUNT > 0)
);

CREATE TABLE SOURCE_TEXT (
	SOURCE_TEXT_ID			SERIAL,
	CONTENTS				TEXT			NOT NULL,
	
	CONSTRAINT PK_SORUCE_TEXT PRIMARY KEY (SOURCE_TEXT_ID)
);

CREATE TABLE SOURCE_FILE (
	SOURCE_FILE_ID			SERIAL,
	FILENAME				VARCHAR(400)	NOT NULL,
	EXTENSION				VARCHAR(15)		NOT NULL,
	SIZE_BYTES				BIGINT			NOT NULL,
	
	CONSTRAINT PK_SOURCE_FILE PRIMARY KEY (SOURCE_FILE_ID),
	
	CONSTRAINT CHK_SOURCE_FILE_SIZE_BYTES_IN_RANGE CHECK (SIZE_BYTES >= 0),
);

CREATE TABLE DIGEST (
	DIGEST_ID				SERIAL,
	ALGORITHM_ID			INTEGER			NOT NULL,
	RESULT_BUNDLE_ID		INTEGER			NOT NULL,
	HEX_VALUE				VARCHAR(512)	NOT NULL,
	
	CONSTRAINT PK_DIGEST PRIMARY KEY (DIGEST_ID),
	CONSTRAINT FK_DIGEST_ALGORITHM_ID FOREIGN KEY (ALGORITHM_ID) REFERENCES ALGORITHM (ALGORITHM_ID) ON UPDATE CASCADE,
	CONSTRAINT FK_DIGEST_RESULT_BUNDLE_ID FOREIGN KEY (RESULT_BUNDLE_ID) REFERENCES RESULT_BUNDLE (RESULT_BUNDLE_ID) ON DELETE CASCADE,
	
	CONSTRAINT CHK_DIGEST_HEX_VALUE_VALID CHECK (HEX_VALUE ~* '^([0-9]|[a-e])*$')
	CONSTRAINT CHK_DIGEST_HEX_VALUE_LENGTH CHECK (LENGTH(HEX_VALUE) > 0)
);

CREATE TABLE TEXT_DIGEST (
	DIGEST_ID				INTEGER			NOT NULL,
	SOURCE_TEXT_ID			INTEGER			NOT NULL,

	CONSTRAINT PK_TEXT_DIGEST PRIMARY KEY (DIGEST_ID)
	CONSTRAINT FK_TEXT_DIGEST_DIGEST_ID FOREIGN KEY (DIGEST_ID) REFERENCES DIGEST (DIGEST_ID) ON DELETE CASCADE,
	CONSTRAINT FK_TEXT_DIGEST_SOURCE_TEXT_ID FOREIGN KEY (SOURCE_TEXT_ID) REFERENCES SOURCE_TEXT (SOURCE_TEXT_ID) ON DELETE CASCADE
);

CREATE TABLE FILE_DIGEST (
	DIGEST_ID				INTEGER			NOT NULL,
	SOURCE_FILE_ID			INTEGER			NOT NULL,
	
	CONSTRAINT PK_FILE_DIGEST PRIMARY KEY (DIGEST_ID)
	CONSTRAINT FK_FILE_DIGEST_DIGEST_ID FOREIGN KEY (DIGEST_ID) REFERENCES DIGEST (DIGEST_ID) ON DELETE CASCADE,
	CONSTRAINT FK_FILE_DIGEST_SOURCE_FILE_ID FOREIGN KEY (SOURCE_FILE_ID) REFERENCES SOURCE_FILE (SOURCE_FILE_ID) ON DELETE CASCADE
);

CREATE TABLE RESULT_BUNDLE (
	RESULT_BUNDLE_ID		SERIAL,
	GUEST_ID				INTEGER			NOT NULL,
	PERMACODE				VARCHAR(32)		NOT NULL,
	VIEW_COUNT				INTEGER			NOT NULL	DEFAULT 0,
	
	CONSTRAINT PK_RESULT_BUNDLE PRIMARY KEY (RESULT_BUNDLE_ID),
	CONSTRAINT AK_RESULT_BUNDLE_PERMACODE UNIQUE (PERMACODE),
	
	CONSTRAINT CHK_RESULT_BUNDLE_PERMACODE_VALID CHECK (PERMACODE ~* '^([0-9]|[a-z])*$'),
	CONSTRAINT CHK_RESULT_BUNDLE_VIEW_COUNT_IN_RANGE CHECK (VIEW_COUNT >= 0)
);

CREATE TABLE EVENT (
	EVENT_ID				BIGSERIAL,
	EVENT_TYPE_ID			SMALLINT		NOT NULL,
	SOURCE_ITEM_ID			INTEGER			NOT NULL,
	ENTITY_TYPE_ID			SMALLINT		NOT NULL,
	GUEST_ID				INTEGER			NOT NULL,
	EVENT_TIME				TIMESTAMP(0)	NOT NULL	DEFAULT CURRENT_TIMESTAMP(0),
	
	CONSTRAINT PK_EVENT PRIMARY KEY (EVENT_ID),
	CONSTRAINT FK_EVENT_EVENT_TYPE_ID FOREIGN KEY (EVENT_TYPE_ID) REFERENCES EVENT_TYPE (EVENT_TYPE_ID) ON UPDATE CASCADE,
	CONSTRAINT FK_EVENT_ENTITY_TYPE_ID FOREIGN KEY (ENTITY_TYPE_ID) REFERENCES ENTITY_TYPE (ENTITY_TYPE_ID) ON UPDATE CASCADE,
	CONSTRAINT FK_EVENT_GUEST_ID FOREIGN KEY (GUEST_ID) REFERENCES GUEST (GUEST_ID),
	
	CONSTRAINT CHK_EVENT_EVENT_TIME_IN_RANGE CHECK (EVENT_TIME BETWEEN '1900-01-01 00:00:00' AND '2099-12-31 23:59:59')
);

CREATE TABLE EVENT_TYPE(
	EVENT_TYPE_ID			SMALLSERIAL,
	CODE					VARCHAR(30)		NOT NULL,
	LABEL					VARCHAR(60)		NOT NULL,
	
	CONSTRAINT PK_EVENT_TYPE PRIMARY KEY (EVENT_TYPE_ID),
	CONSTRAINT AK_EVENT_TYPE_CODE UNIQUE (CODE),
	CONSTRAINT AK_EVENT_TYPE_LABEL UNIQUE (LABEL)
);

CREATE TABLE ENTITY_TYPE(
	ENTITY_TYPE_ID			SMALLSERIAL,
	CODE					VARCHAR(30)		NOT NULL,
	LABEL					VARCHAR(60)		NOT NULL,
	
	CONSTRAINT PK_ENTITY_TYPE PRIMARY KEY (ENTITY_TYPE_ID),
	CONSTRAINT AK_ENTITY_TYPE_CODE UNIQUE (CODE),
	CONSTRAINT AK_ENTITY_TYPE_LABEL UNIQUE (LABEL)
);

/*2.2 Removal statements*/
DROP TABLE IF EXISTS ALGORITHM CASCADE;
DROP TABLE IF EXISTS GUEST CASCADE;
DROP TABLE IF EXISTS SOURCE_TEXT CASCADE;
DROP TABLE IF EXISTS SOURCE_FILE CASCADE;
DROP TABLE IF EXISTS DIGEST CASCADE;
DROP TABLE IF EXISTS TEXT_DIGEST CASCADE;
DROP TABLE IF EXISTS FILE_DIGEST CASCADE;
DROP TABLE IF EXISTS RESULT_BUNDLE CASCADE;
DROP TABLE IF EXISTS EVENT CASCADE;
DROP TABLE IF EXISTS EVENT_TYPE CASCADE;
DROP TABLE IF EXISTS ENTITY_TYPE CASCADE;

/*3. DDL - Indices*/
/*3.1 Primary indices (foreign keys etc.)*/
/*3.1.1 Creation statements*/
TODO

/*3.1.2 Removal statements*/
TODO


/*3.2 Secondary indices (based on business logic etc.)*/
/*3.2.1 Creation statements*/
TODO

/*3.2.2 Removal statements*/
TODO


/*4. DDL - Views*/
/*4.1 Creation statements*/
TODO

/*4.1 Removal statements*/
TODO


/*5. Management of initial data*/
/*5.1 Regular tables*/
/*5.1.1 Insertion statements*/
TODO

/*5.1.2 Deletion statements*/
TRUNCATE TABLE GUEST CASCADE;
TRUNCATE TABLE SOURCE_TEXT CASCADE;
TRUNCATE TABLE SOURCE_FILE CASCADE;
TRUNCATE TABLE DIGEST CASCADE;
TRUNCATE TABLE TEXT_DIGEST CASCADE;
TRUNCATE TABLE FILE_DIGEST CASCADE;
TRUNCATE TABLE RESULT_BUNDLE CASCADE;
TRUNCATE TABLE EVENT CASCADE;


/*5.2 Reference tables*/
/*5.2.1 Insertion statements*/
TODO

/*5.2.2 Deletion statements*/
TRUNCATE TABLE ALGORITHM CASCADE;
TRUNCATE TABLE EVENT_TYPE CASCADE;
TRUNCATE TABLE ENTITY_TYPE CASCADE;